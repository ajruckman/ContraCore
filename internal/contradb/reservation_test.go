// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package contradb

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testReservations(t *testing.T) {
	t.Parallel()

	query := Reservations()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testReservationsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Reservation{}
	if err = randomize.Struct(seed, o, reservationDBTypes, true, reservationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Reservation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Reservations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testReservationsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Reservation{}
	if err = randomize.Struct(seed, o, reservationDBTypes, true, reservationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Reservation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Reservations().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Reservations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testReservationsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Reservation{}
	if err = randomize.Struct(seed, o, reservationDBTypes, true, reservationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Reservation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ReservationSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Reservations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testReservationsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Reservation{}
	if err = randomize.Struct(seed, o, reservationDBTypes, true, reservationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Reservation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ReservationExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Reservation exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ReservationExists to return true, but got false.")
	}
}

func testReservationsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Reservation{}
	if err = randomize.Struct(seed, o, reservationDBTypes, true, reservationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Reservation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	reservationFound, err := FindReservation(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if reservationFound == nil {
		t.Error("want a record, got nil")
	}
}

func testReservationsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Reservation{}
	if err = randomize.Struct(seed, o, reservationDBTypes, true, reservationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Reservation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Reservations().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testReservationsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Reservation{}
	if err = randomize.Struct(seed, o, reservationDBTypes, true, reservationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Reservation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Reservations().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testReservationsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	reservationOne := &Reservation{}
	reservationTwo := &Reservation{}
	if err = randomize.Struct(seed, reservationOne, reservationDBTypes, false, reservationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Reservation struct: %s", err)
	}
	if err = randomize.Struct(seed, reservationTwo, reservationDBTypes, false, reservationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Reservation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = reservationOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = reservationTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Reservations().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testReservationsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	reservationOne := &Reservation{}
	reservationTwo := &Reservation{}
	if err = randomize.Struct(seed, reservationOne, reservationDBTypes, false, reservationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Reservation struct: %s", err)
	}
	if err = randomize.Struct(seed, reservationTwo, reservationDBTypes, false, reservationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Reservation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = reservationOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = reservationTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Reservations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func reservationBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Reservation) error {
	*o = Reservation{}
	return nil
}

func reservationAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Reservation) error {
	*o = Reservation{}
	return nil
}

func reservationAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Reservation) error {
	*o = Reservation{}
	return nil
}

func reservationBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Reservation) error {
	*o = Reservation{}
	return nil
}

func reservationAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Reservation) error {
	*o = Reservation{}
	return nil
}

func reservationBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Reservation) error {
	*o = Reservation{}
	return nil
}

func reservationAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Reservation) error {
	*o = Reservation{}
	return nil
}

func reservationBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Reservation) error {
	*o = Reservation{}
	return nil
}

func reservationAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Reservation) error {
	*o = Reservation{}
	return nil
}

func testReservationsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Reservation{}
	o := &Reservation{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, reservationDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Reservation object: %s", err)
	}

	AddReservationHook(boil.BeforeInsertHook, reservationBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	reservationBeforeInsertHooks = []ReservationHook{}

	AddReservationHook(boil.AfterInsertHook, reservationAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	reservationAfterInsertHooks = []ReservationHook{}

	AddReservationHook(boil.AfterSelectHook, reservationAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	reservationAfterSelectHooks = []ReservationHook{}

	AddReservationHook(boil.BeforeUpdateHook, reservationBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	reservationBeforeUpdateHooks = []ReservationHook{}

	AddReservationHook(boil.AfterUpdateHook, reservationAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	reservationAfterUpdateHooks = []ReservationHook{}

	AddReservationHook(boil.BeforeDeleteHook, reservationBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	reservationBeforeDeleteHooks = []ReservationHook{}

	AddReservationHook(boil.AfterDeleteHook, reservationAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	reservationAfterDeleteHooks = []ReservationHook{}

	AddReservationHook(boil.BeforeUpsertHook, reservationBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	reservationBeforeUpsertHooks = []ReservationHook{}

	AddReservationHook(boil.AfterUpsertHook, reservationAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	reservationAfterUpsertHooks = []ReservationHook{}
}

func testReservationsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Reservation{}
	if err = randomize.Struct(seed, o, reservationDBTypes, true, reservationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Reservation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Reservations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testReservationsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Reservation{}
	if err = randomize.Struct(seed, o, reservationDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Reservation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(reservationColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Reservations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testReservationsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Reservation{}
	if err = randomize.Struct(seed, o, reservationDBTypes, true, reservationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Reservation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testReservationsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Reservation{}
	if err = randomize.Struct(seed, o, reservationDBTypes, true, reservationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Reservation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ReservationSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testReservationsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Reservation{}
	if err = randomize.Struct(seed, o, reservationDBTypes, true, reservationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Reservation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Reservations().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	reservationDBTypes = map[string]string{`ID`: `integer`, `Time`: `timestamp without time zone`, `Active`: `boolean`, `Mac`: `macaddr`, `IP`: `inet`, `Creator`: `text`, `Comment`: `text`}
	_                  = bytes.MinRead
)

func testReservationsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(reservationPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(reservationAllColumns) == len(reservationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Reservation{}
	if err = randomize.Struct(seed, o, reservationDBTypes, true, reservationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Reservation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Reservations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, reservationDBTypes, true, reservationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Reservation struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testReservationsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(reservationAllColumns) == len(reservationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Reservation{}
	if err = randomize.Struct(seed, o, reservationDBTypes, true, reservationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Reservation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Reservations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, reservationDBTypes, true, reservationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Reservation struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(reservationAllColumns, reservationPrimaryKeyColumns) {
		fields = reservationAllColumns
	} else {
		fields = strmangle.SetComplement(
			reservationAllColumns,
			reservationPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ReservationSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testReservationsUpsert(t *testing.T) {
	t.Parallel()

	if len(reservationAllColumns) == len(reservationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Reservation{}
	if err = randomize.Struct(seed, &o, reservationDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Reservation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Reservation: %s", err)
	}

	count, err := Reservations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, reservationDBTypes, false, reservationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Reservation struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Reservation: %s", err)
	}

	count, err = Reservations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
