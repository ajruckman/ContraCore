// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package contradb

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Configs", testConfigs)
	t.Run("Leases", testLeases)
	t.Run("Logs", testLogs)
	t.Run("Reservations", testReservations)
	t.Run("Rules", testRules)
}

func TestDelete(t *testing.T) {
	t.Run("Configs", testConfigsDelete)
	t.Run("Leases", testLeasesDelete)
	t.Run("Logs", testLogsDelete)
	t.Run("Reservations", testReservationsDelete)
	t.Run("Rules", testRulesDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Configs", testConfigsQueryDeleteAll)
	t.Run("Leases", testLeasesQueryDeleteAll)
	t.Run("Logs", testLogsQueryDeleteAll)
	t.Run("Reservations", testReservationsQueryDeleteAll)
	t.Run("Rules", testRulesQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Configs", testConfigsSliceDeleteAll)
	t.Run("Leases", testLeasesSliceDeleteAll)
	t.Run("Logs", testLogsSliceDeleteAll)
	t.Run("Reservations", testReservationsSliceDeleteAll)
	t.Run("Rules", testRulesSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Configs", testConfigsExists)
	t.Run("Leases", testLeasesExists)
	t.Run("Logs", testLogsExists)
	t.Run("Reservations", testReservationsExists)
	t.Run("Rules", testRulesExists)
}

func TestFind(t *testing.T) {
	t.Run("Configs", testConfigsFind)
	t.Run("Leases", testLeasesFind)
	t.Run("Logs", testLogsFind)
	t.Run("Reservations", testReservationsFind)
	t.Run("Rules", testRulesFind)
}

func TestBind(t *testing.T) {
	t.Run("Configs", testConfigsBind)
	t.Run("Leases", testLeasesBind)
	t.Run("Logs", testLogsBind)
	t.Run("Reservations", testReservationsBind)
	t.Run("Rules", testRulesBind)
}

func TestOne(t *testing.T) {
	t.Run("Configs", testConfigsOne)
	t.Run("Leases", testLeasesOne)
	t.Run("Logs", testLogsOne)
	t.Run("Reservations", testReservationsOne)
	t.Run("Rules", testRulesOne)
}

func TestAll(t *testing.T) {
	t.Run("Configs", testConfigsAll)
	t.Run("Leases", testLeasesAll)
	t.Run("Logs", testLogsAll)
	t.Run("Reservations", testReservationsAll)
	t.Run("Rules", testRulesAll)
}

func TestCount(t *testing.T) {
	t.Run("Configs", testConfigsCount)
	t.Run("Leases", testLeasesCount)
	t.Run("Logs", testLogsCount)
	t.Run("Reservations", testReservationsCount)
	t.Run("Rules", testRulesCount)
}

func TestHooks(t *testing.T) {
	t.Run("Configs", testConfigsHooks)
	t.Run("Leases", testLeasesHooks)
	t.Run("Logs", testLogsHooks)
	t.Run("Reservations", testReservationsHooks)
	t.Run("Rules", testRulesHooks)
}

func TestInsert(t *testing.T) {
	t.Run("Configs", testConfigsInsert)
	t.Run("Configs", testConfigsInsertWhitelist)
	t.Run("Leases", testLeasesInsert)
	t.Run("Leases", testLeasesInsertWhitelist)
	t.Run("Logs", testLogsInsert)
	t.Run("Logs", testLogsInsertWhitelist)
	t.Run("Reservations", testReservationsInsert)
	t.Run("Reservations", testReservationsInsertWhitelist)
	t.Run("Rules", testRulesInsert)
	t.Run("Rules", testRulesInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {}

func TestReload(t *testing.T) {
	t.Run("Configs", testConfigsReload)
	t.Run("Leases", testLeasesReload)
	t.Run("Logs", testLogsReload)
	t.Run("Reservations", testReservationsReload)
	t.Run("Rules", testRulesReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Configs", testConfigsReloadAll)
	t.Run("Leases", testLeasesReloadAll)
	t.Run("Logs", testLogsReloadAll)
	t.Run("Reservations", testReservationsReloadAll)
	t.Run("Rules", testRulesReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Configs", testConfigsSelect)
	t.Run("Leases", testLeasesSelect)
	t.Run("Logs", testLogsSelect)
	t.Run("Reservations", testReservationsSelect)
	t.Run("Rules", testRulesSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Configs", testConfigsUpdate)
	t.Run("Leases", testLeasesUpdate)
	t.Run("Logs", testLogsUpdate)
	t.Run("Reservations", testReservationsUpdate)
	t.Run("Rules", testRulesUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Configs", testConfigsSliceUpdateAll)
	t.Run("Leases", testLeasesSliceUpdateAll)
	t.Run("Logs", testLogsSliceUpdateAll)
	t.Run("Reservations", testReservationsSliceUpdateAll)
	t.Run("Rules", testRulesSliceUpdateAll)
}
