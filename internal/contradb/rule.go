// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package contradb

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Rule is an object representing the database table.
type Rule struct {
	ID      int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	Pattern string      `boil:"pattern" json:"pattern" toml:"pattern" yaml:"pattern"`
	Class   int         `boil:"class" json:"class" toml:"class" yaml:"class"`
	Domain  null.String `boil:"domain" json:"domain,omitempty" toml:"domain" yaml:"domain,omitempty"`
	TLD     null.String `boil:"tld" json:"tld,omitempty" toml:"tld" yaml:"tld,omitempty"`
	SLD     null.String `boil:"sld" json:"sld,omitempty" toml:"sld" yaml:"sld,omitempty"`

	R *ruleR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L ruleL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RuleColumns = struct {
	ID      string
	Pattern string
	Class   string
	Domain  string
	TLD     string
	SLD     string
}{
	ID:      "id",
	Pattern: "pattern",
	Class:   "class",
	Domain:  "domain",
	TLD:     "tld",
	SLD:     "sld",
}

// Generated where

var RuleWhere = struct {
	ID      whereHelperint
	Pattern whereHelperstring
	Class   whereHelperint
	Domain  whereHelpernull_String
	TLD     whereHelpernull_String
	SLD     whereHelpernull_String
}{
	ID:      whereHelperint{field: "\"rule\".\"id\""},
	Pattern: whereHelperstring{field: "\"rule\".\"pattern\""},
	Class:   whereHelperint{field: "\"rule\".\"class\""},
	Domain:  whereHelpernull_String{field: "\"rule\".\"domain\""},
	TLD:     whereHelpernull_String{field: "\"rule\".\"tld\""},
	SLD:     whereHelpernull_String{field: "\"rule\".\"sld\""},
}

// RuleRels is where relationship names are stored.
var RuleRels = struct {
}{}

// ruleR is where relationships are stored.
type ruleR struct {
}

// NewStruct creates a new relationship struct
func (*ruleR) NewStruct() *ruleR {
	return &ruleR{}
}

// ruleL is where Load methods for each relationship are stored.
type ruleL struct{}

var (
	ruleAllColumns            = []string{"id", "pattern", "class", "domain", "tld", "sld"}
	ruleColumnsWithoutDefault = []string{"pattern", "class", "domain", "tld", "sld"}
	ruleColumnsWithDefault    = []string{"id"}
	rulePrimaryKeyColumns     = []string{"id"}
)

type (
	// RuleSlice is an alias for a slice of pointers to Rule.
	// This should generally be used opposed to []Rule.
	RuleSlice []*Rule
	// RuleHook is the signature for custom Rule hook methods
	RuleHook func(context.Context, boil.ContextExecutor, *Rule) error

	ruleQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	ruleType                 = reflect.TypeOf(&Rule{})
	ruleMapping              = queries.MakeStructMapping(ruleType)
	rulePrimaryKeyMapping, _ = queries.BindMapping(ruleType, ruleMapping, rulePrimaryKeyColumns)
	ruleInsertCacheMut       sync.RWMutex
	ruleInsertCache          = make(map[string]insertCache)
	ruleUpdateCacheMut       sync.RWMutex
	ruleUpdateCache          = make(map[string]updateCache)
	ruleUpsertCacheMut       sync.RWMutex
	ruleUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var ruleBeforeInsertHooks []RuleHook
var ruleBeforeUpdateHooks []RuleHook
var ruleBeforeDeleteHooks []RuleHook
var ruleBeforeUpsertHooks []RuleHook

var ruleAfterInsertHooks []RuleHook
var ruleAfterSelectHooks []RuleHook
var ruleAfterUpdateHooks []RuleHook
var ruleAfterDeleteHooks []RuleHook
var ruleAfterUpsertHooks []RuleHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Rule) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ruleBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Rule) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ruleBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Rule) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ruleBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Rule) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ruleBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Rule) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ruleAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Rule) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ruleAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Rule) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ruleAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Rule) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ruleAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Rule) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ruleAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddRuleHook registers your hook function for all future operations.
func AddRuleHook(hookPoint boil.HookPoint, ruleHook RuleHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		ruleBeforeInsertHooks = append(ruleBeforeInsertHooks, ruleHook)
	case boil.BeforeUpdateHook:
		ruleBeforeUpdateHooks = append(ruleBeforeUpdateHooks, ruleHook)
	case boil.BeforeDeleteHook:
		ruleBeforeDeleteHooks = append(ruleBeforeDeleteHooks, ruleHook)
	case boil.BeforeUpsertHook:
		ruleBeforeUpsertHooks = append(ruleBeforeUpsertHooks, ruleHook)
	case boil.AfterInsertHook:
		ruleAfterInsertHooks = append(ruleAfterInsertHooks, ruleHook)
	case boil.AfterSelectHook:
		ruleAfterSelectHooks = append(ruleAfterSelectHooks, ruleHook)
	case boil.AfterUpdateHook:
		ruleAfterUpdateHooks = append(ruleAfterUpdateHooks, ruleHook)
	case boil.AfterDeleteHook:
		ruleAfterDeleteHooks = append(ruleAfterDeleteHooks, ruleHook)
	case boil.AfterUpsertHook:
		ruleAfterUpsertHooks = append(ruleAfterUpsertHooks, ruleHook)
	}
}

// One returns a single rule record from the query.
func (q ruleQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Rule, error) {
	o := &Rule{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "contradb: failed to execute a one query for rule")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Rule records from the query.
func (q ruleQuery) All(ctx context.Context, exec boil.ContextExecutor) (RuleSlice, error) {
	var o []*Rule

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "contradb: failed to assign all query results to Rule slice")
	}

	if len(ruleAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Rule records in the query.
func (q ruleQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "contradb: failed to count rule rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q ruleQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "contradb: failed to check if rule exists")
	}

	return count > 0, nil
}

// Rules retrieves all the records using an executor.
func Rules(mods ...qm.QueryMod) ruleQuery {
	mods = append(mods, qm.From("\"rule\""))
	return ruleQuery{NewQuery(mods...)}
}

// FindRule retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRule(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Rule, error) {
	ruleObj := &Rule{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"rule\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, ruleObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "contradb: unable to select from rule")
	}

	return ruleObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Rule) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("contradb: no rule provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(ruleColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	ruleInsertCacheMut.RLock()
	cache, cached := ruleInsertCache[key]
	ruleInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			ruleAllColumns,
			ruleColumnsWithDefault,
			ruleColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(ruleType, ruleMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(ruleType, ruleMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"rule\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"rule\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "contradb: unable to insert into rule")
	}

	if !cached {
		ruleInsertCacheMut.Lock()
		ruleInsertCache[key] = cache
		ruleInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Rule.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Rule) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	ruleUpdateCacheMut.RLock()
	cache, cached := ruleUpdateCache[key]
	ruleUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			ruleAllColumns,
			rulePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("contradb: unable to update rule, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"rule\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, rulePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(ruleType, ruleMapping, append(wl, rulePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "contradb: unable to update rule row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "contradb: failed to get rows affected by update for rule")
	}

	if !cached {
		ruleUpdateCacheMut.Lock()
		ruleUpdateCache[key] = cache
		ruleUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q ruleQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "contradb: unable to update all for rule")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "contradb: unable to retrieve rows affected for rule")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RuleSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("contradb: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), rulePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"rule\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, rulePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "contradb: unable to update all in rule slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "contradb: unable to retrieve rows affected all in update all rule")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Rule) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("contradb: no rule provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(ruleColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	ruleUpsertCacheMut.RLock()
	cache, cached := ruleUpsertCache[key]
	ruleUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			ruleAllColumns,
			ruleColumnsWithDefault,
			ruleColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			ruleAllColumns,
			rulePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("contradb: unable to upsert rule, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(rulePrimaryKeyColumns))
			copy(conflict, rulePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"rule\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(ruleType, ruleMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(ruleType, ruleMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "contradb: unable to upsert rule")
	}

	if !cached {
		ruleUpsertCacheMut.Lock()
		ruleUpsertCache[key] = cache
		ruleUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Rule record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Rule) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("contradb: no Rule provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), rulePrimaryKeyMapping)
	sql := "DELETE FROM \"rule\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "contradb: unable to delete from rule")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "contradb: failed to get rows affected by delete for rule")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q ruleQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("contradb: no ruleQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "contradb: unable to delete all from rule")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "contradb: failed to get rows affected by deleteall for rule")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RuleSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(ruleBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), rulePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"rule\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, rulePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "contradb: unable to delete all from rule slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "contradb: failed to get rows affected by deleteall for rule")
	}

	if len(ruleAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Rule) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindRule(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RuleSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RuleSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), rulePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"rule\".* FROM \"rule\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, rulePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "contradb: unable to reload all in RuleSlice")
	}

	*o = slice

	return nil
}

// RuleExists checks if the Rule row exists.
func RuleExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"rule\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "contradb: unable to check if rule exists")
	}

	return exists, nil
}
