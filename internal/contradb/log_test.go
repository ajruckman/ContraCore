// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package contradb

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testLogs(t *testing.T) {
	t.Parallel()

	query := Logs()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testLogsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Log{}
	if err = randomize.Struct(seed, o, logDBTypes, true, logColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Log struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Logs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testLogsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Log{}
	if err = randomize.Struct(seed, o, logDBTypes, true, logColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Log struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Logs().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Logs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testLogsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Log{}
	if err = randomize.Struct(seed, o, logDBTypes, true, logColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Log struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := LogSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Logs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testLogsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Log{}
	if err = randomize.Struct(seed, o, logDBTypes, true, logColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Log struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := LogExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Log exists: %s", err)
	}
	if !e {
		t.Errorf("Expected LogExists to return true, but got false.")
	}
}

func testLogsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Log{}
	if err = randomize.Struct(seed, o, logDBTypes, true, logColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Log struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	logFound, err := FindLog(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if logFound == nil {
		t.Error("want a record, got nil")
	}
}

func testLogsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Log{}
	if err = randomize.Struct(seed, o, logDBTypes, true, logColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Log struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Logs().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testLogsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Log{}
	if err = randomize.Struct(seed, o, logDBTypes, true, logColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Log struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Logs().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testLogsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	logOne := &Log{}
	logTwo := &Log{}
	if err = randomize.Struct(seed, logOne, logDBTypes, false, logColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Log struct: %s", err)
	}
	if err = randomize.Struct(seed, logTwo, logDBTypes, false, logColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Log struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = logOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = logTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Logs().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testLogsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	logOne := &Log{}
	logTwo := &Log{}
	if err = randomize.Struct(seed, logOne, logDBTypes, false, logColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Log struct: %s", err)
	}
	if err = randomize.Struct(seed, logTwo, logDBTypes, false, logColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Log struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = logOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = logTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Logs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func logBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Log) error {
	*o = Log{}
	return nil
}

func logAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Log) error {
	*o = Log{}
	return nil
}

func logAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Log) error {
	*o = Log{}
	return nil
}

func logBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Log) error {
	*o = Log{}
	return nil
}

func logAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Log) error {
	*o = Log{}
	return nil
}

func logBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Log) error {
	*o = Log{}
	return nil
}

func logAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Log) error {
	*o = Log{}
	return nil
}

func logBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Log) error {
	*o = Log{}
	return nil
}

func logAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Log) error {
	*o = Log{}
	return nil
}

func testLogsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Log{}
	o := &Log{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, logDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Log object: %s", err)
	}

	AddLogHook(boil.BeforeInsertHook, logBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	logBeforeInsertHooks = []LogHook{}

	AddLogHook(boil.AfterInsertHook, logAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	logAfterInsertHooks = []LogHook{}

	AddLogHook(boil.AfterSelectHook, logAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	logAfterSelectHooks = []LogHook{}

	AddLogHook(boil.BeforeUpdateHook, logBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	logBeforeUpdateHooks = []LogHook{}

	AddLogHook(boil.AfterUpdateHook, logAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	logAfterUpdateHooks = []LogHook{}

	AddLogHook(boil.BeforeDeleteHook, logBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	logBeforeDeleteHooks = []LogHook{}

	AddLogHook(boil.AfterDeleteHook, logAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	logAfterDeleteHooks = []LogHook{}

	AddLogHook(boil.BeforeUpsertHook, logBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	logBeforeUpsertHooks = []LogHook{}

	AddLogHook(boil.AfterUpsertHook, logAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	logAfterUpsertHooks = []LogHook{}
}

func testLogsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Log{}
	if err = randomize.Struct(seed, o, logDBTypes, true, logColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Log struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Logs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testLogsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Log{}
	if err = randomize.Struct(seed, o, logDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Log struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(logColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Logs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testLogsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Log{}
	if err = randomize.Struct(seed, o, logDBTypes, true, logColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Log struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testLogsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Log{}
	if err = randomize.Struct(seed, o, logDBTypes, true, logColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Log struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := LogSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testLogsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Log{}
	if err = randomize.Struct(seed, o, logDBTypes, true, logColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Log struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Logs().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	logDBTypes = map[string]string{`ID`: `bigint`, `Time`: `timestamp without time zone`, `Client`: `inet`, `Question`: `text`, `QuestionType`: `text`, `Action`: `text`, `Answers`: `ARRAYtext`, `ClientMac`: `macaddr`, `ClientHostname`: `text`, `ClientVendor`: `text`}
	_          = bytes.MinRead
)

func testLogsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(logPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(logAllColumns) == len(logPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Log{}
	if err = randomize.Struct(seed, o, logDBTypes, true, logColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Log struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Logs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, logDBTypes, true, logPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Log struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testLogsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(logAllColumns) == len(logPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Log{}
	if err = randomize.Struct(seed, o, logDBTypes, true, logColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Log struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Logs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, logDBTypes, true, logPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Log struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(logAllColumns, logPrimaryKeyColumns) {
		fields = logAllColumns
	} else {
		fields = strmangle.SetComplement(
			logAllColumns,
			logPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := LogSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testLogsUpsert(t *testing.T) {
	t.Parallel()

	if len(logAllColumns) == len(logPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Log{}
	if err = randomize.Struct(seed, &o, logDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Log struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Log: %s", err)
	}

	count, err := Logs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, logDBTypes, false, logPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Log struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Log: %s", err)
	}

	count, err = Logs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
