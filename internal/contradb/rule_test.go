// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package contradb

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testRules(t *testing.T) {
	t.Parallel()

	query := Rules()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testRulesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Rule{}
	if err = randomize.Struct(seed, o, ruleDBTypes, true, ruleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Rule struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Rules().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRulesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Rule{}
	if err = randomize.Struct(seed, o, ruleDBTypes, true, ruleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Rule struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Rules().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Rules().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRulesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Rule{}
	if err = randomize.Struct(seed, o, ruleDBTypes, true, ruleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Rule struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := RuleSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Rules().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRulesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Rule{}
	if err = randomize.Struct(seed, o, ruleDBTypes, true, ruleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Rule struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := RuleExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Rule exists: %s", err)
	}
	if !e {
		t.Errorf("Expected RuleExists to return true, but got false.")
	}
}

func testRulesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Rule{}
	if err = randomize.Struct(seed, o, ruleDBTypes, true, ruleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Rule struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	ruleFound, err := FindRule(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if ruleFound == nil {
		t.Error("want a record, got nil")
	}
}

func testRulesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Rule{}
	if err = randomize.Struct(seed, o, ruleDBTypes, true, ruleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Rule struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Rules().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testRulesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Rule{}
	if err = randomize.Struct(seed, o, ruleDBTypes, true, ruleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Rule struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Rules().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testRulesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	ruleOne := &Rule{}
	ruleTwo := &Rule{}
	if err = randomize.Struct(seed, ruleOne, ruleDBTypes, false, ruleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Rule struct: %s", err)
	}
	if err = randomize.Struct(seed, ruleTwo, ruleDBTypes, false, ruleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Rule struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = ruleOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = ruleTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Rules().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testRulesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	ruleOne := &Rule{}
	ruleTwo := &Rule{}
	if err = randomize.Struct(seed, ruleOne, ruleDBTypes, false, ruleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Rule struct: %s", err)
	}
	if err = randomize.Struct(seed, ruleTwo, ruleDBTypes, false, ruleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Rule struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = ruleOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = ruleTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Rules().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func ruleBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Rule) error {
	*o = Rule{}
	return nil
}

func ruleAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Rule) error {
	*o = Rule{}
	return nil
}

func ruleAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Rule) error {
	*o = Rule{}
	return nil
}

func ruleBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Rule) error {
	*o = Rule{}
	return nil
}

func ruleAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Rule) error {
	*o = Rule{}
	return nil
}

func ruleBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Rule) error {
	*o = Rule{}
	return nil
}

func ruleAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Rule) error {
	*o = Rule{}
	return nil
}

func ruleBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Rule) error {
	*o = Rule{}
	return nil
}

func ruleAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Rule) error {
	*o = Rule{}
	return nil
}

func testRulesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Rule{}
	o := &Rule{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, ruleDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Rule object: %s", err)
	}

	AddRuleHook(boil.BeforeInsertHook, ruleBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	ruleBeforeInsertHooks = []RuleHook{}

	AddRuleHook(boil.AfterInsertHook, ruleAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	ruleAfterInsertHooks = []RuleHook{}

	AddRuleHook(boil.AfterSelectHook, ruleAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	ruleAfterSelectHooks = []RuleHook{}

	AddRuleHook(boil.BeforeUpdateHook, ruleBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	ruleBeforeUpdateHooks = []RuleHook{}

	AddRuleHook(boil.AfterUpdateHook, ruleAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	ruleAfterUpdateHooks = []RuleHook{}

	AddRuleHook(boil.BeforeDeleteHook, ruleBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	ruleBeforeDeleteHooks = []RuleHook{}

	AddRuleHook(boil.AfterDeleteHook, ruleAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	ruleAfterDeleteHooks = []RuleHook{}

	AddRuleHook(boil.BeforeUpsertHook, ruleBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	ruleBeforeUpsertHooks = []RuleHook{}

	AddRuleHook(boil.AfterUpsertHook, ruleAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	ruleAfterUpsertHooks = []RuleHook{}
}

func testRulesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Rule{}
	if err = randomize.Struct(seed, o, ruleDBTypes, true, ruleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Rule struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Rules().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRulesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Rule{}
	if err = randomize.Struct(seed, o, ruleDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Rule struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(ruleColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Rules().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRulesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Rule{}
	if err = randomize.Struct(seed, o, ruleDBTypes, true, ruleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Rule struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testRulesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Rule{}
	if err = randomize.Struct(seed, o, ruleDBTypes, true, ruleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Rule struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := RuleSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testRulesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Rule{}
	if err = randomize.Struct(seed, o, ruleDBTypes, true, ruleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Rule struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Rules().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	ruleDBTypes = map[string]string{`ID`: `integer`, `Pattern`: `text`, `Class`: `integer`, `Domain`: `text`, `TLD`: `text`, `SLD`: `text`}
	_           = bytes.MinRead
)

func testRulesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(rulePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(ruleAllColumns) == len(rulePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Rule{}
	if err = randomize.Struct(seed, o, ruleDBTypes, true, ruleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Rule struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Rules().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, ruleDBTypes, true, rulePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Rule struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testRulesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(ruleAllColumns) == len(rulePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Rule{}
	if err = randomize.Struct(seed, o, ruleDBTypes, true, ruleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Rule struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Rules().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, ruleDBTypes, true, rulePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Rule struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(ruleAllColumns, rulePrimaryKeyColumns) {
		fields = ruleAllColumns
	} else {
		fields = strmangle.SetComplement(
			ruleAllColumns,
			rulePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := RuleSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testRulesUpsert(t *testing.T) {
	t.Parallel()

	if len(ruleAllColumns) == len(rulePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Rule{}
	if err = randomize.Struct(seed, &o, ruleDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Rule struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Rule: %s", err)
	}

	count, err := Rules().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, ruleDBTypes, false, rulePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Rule struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Rule: %s", err)
	}

	count, err = Rules().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
